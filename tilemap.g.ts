// Auto-generated code. Do not edit.
namespace myTiles {
    //% fixedInstance jres blockIdentity=images._tile
    export const transparency16 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile1 = image.ofBuffer(hex``);

    helpers._registerFactory("tilemap", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "level2":
            case "level2":return tiles.createTilemap(hex``, img`
2 2 . 2 2 . . . . . . . . . . . 
2 2 . 2 2 . 2 2 2 2 2 2 2 2 . . 
. 2 . 2 2 2 2 2 . 2 2 . . . . . 
. 2 . 2 2 2 2 2 . 2 2 . . . . . 
. 2 . 2 2 . 2 2 . 2 2 . . . . . 
. 2 . 2 2 . . . . . . . . . . . 
. 2 . 2 2 2 2 2 . . . . . . . . 
. 2 . 2 2 . 2 2 . . . . . . . . 
. . . 2 2 . 2 2 . . . . . . . . 
2 . . . . . 2 2 . . . . . . . . 
. 2 2 . . . 2 2 . . . . . . . . 
. 2 . . . . 2 2 . . . . . . . . 
. 2 . 2 2 . 2 2 . . . . . . . . 
. 2 . 2 2 2 2 2 . . . . . . . . 
. . . . . . . . . . . . . . . . 
. 2 . . . . . . . . . . . . . . 
`, [myTiles.transparency16,sprites.castle.tilePath5,sprites.dungeon.collectibleInsignia], TileScale.Sixteen);
            case "level1":
            case "level1":return tiles.createTilemap(hex``, img`
2 . . . 2 . . . . . 2 . . 2 . . 
2 . . . 2 2 . . . . 2 . . 2 . . 
2 . . . . 2 . . . 2 . . . 2 . . 
2 . . . . . . . . 2 . . . 2 . . 
2 2 . . . 2 2 2 2 2 . . . 2 . . 
2 . . . . . . . . 2 . . . 2 . . 
2 . . . . . . . . 2 . . . 2 . . 
2 . 2 2 2 . . . . 2 . . . 2 . . 
2 2 2 . 2 2 . 2 2 2 2 2 . 2 . . 
2 . . . . . . . . 2 . . 2 2 . 2 
. . . . . . . . . 2 . . . . . 2 
. . . . . . . . . 2 . . . . . 2 
2 2 2 2 . . . . 2 2 . . . . 2 . 
. 2 . 2 2 2 . 2 2 2 . . . . 2 . 
. 2 . . . . . . 2 2 2 2 . . 2 . 
. 2 . . . . . . . . . . . . 2 . 
`, [myTiles.transparency16,sprites.builtin.forestTiles0,sprites.castle.tilePath5], TileScale.Sixteen);
            case "level3":
            case "level3":return tiles.createTilemap(hex``, img`
2 2 . 2 2 2 2 2 2 2 2 2 2 2 . . 
2 2 . 2 2 2 . . . . . . . 2 . . 
2 2 . . . . . 2 2 2 2 2 . 2 . . 
. . . . 2 . . 2 2 2 2 2 2 2 . . 
2 . . . 2 2 2 . . . . . . 2 . . 
2 . . . 2 2 . 2 2 2 2 2 2 2 . . 
2 . . . 2 . . 2 2 2 2 2 . 2 . . 
2 . . . . . . . . . . 2 . 2 . . 
2 . 2 . 2 2 . . 2 2 . 2 2 2 . . 
2 . 2 . 2 2 . . . 2 . 2 2 2 . . 
2 . . . 2 . . . . . . . . 2 . . 
2 . . . . . . . . 2 . 2 . 2 . . 
. . . . 2 . 2 2 2 2 . 2 2 2 . . 
. . . . 2 . 2 2 2 2 . 2 2 2 . . 
. . . . 2 . 2 2 2 2 2 2 2 2 . . 
. . . . 2 . . . . . . . . . . . 
`, [myTiles.transparency16,myTiles.tile1,sprites.dungeon.collectibleInsignia,sprites.dungeon.collectibleBlueCrystal], TileScale.Sixteen);
            case "level5":
            case "level5":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16,sprites.dungeon.darkGroundWest,sprites.dungeon.chestClosed], TileScale.Sixteen);
            case "level6":
            case "level6":return tiles.createTilemap(hex``, img`
2 2 . . . . . . . . . . . 2 2 . 
. 2 2 . . . . . . . . . . 2 . . 
. . 2 2 . . . . . . . . 2 . . . 
. . . 2 2 . . . . . . 2 2 . . . 
. . . . 2 2 . . . 2 2 2 . . . . 
. . . . . 2 2 . 2 2 . . . . . . 
. . . . . . 2 2 2 . . . . . . . 
. . . . . . 2 2 2 . . . . . . . 
. . . . 2 2 . 2 2 2 . . . . . . 
. . . 2 2 . 2 2 . 2 2 . . . . . 
. . 2 2 . . 2 . . . 2 2 . . . . 
. . 2 . . . 2 . . . . 2 2 . . . 
. . . . . . 2 . . . . . 2 2 . . 
. . . . . . 2 . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16,sprites.builtin.brick,sprites.castle.rock2], TileScale.Sixteen);
            case "level4":
            case "level4":return tiles.createTilemap(hex``, img`
2 . 2 . 2 2 . . . . . . . . . . 
2 . 2 . 2 2 2 2 2 2 2 2 2 2 2 2 
2 . 2 . . . . . . . . . . . 2 2 
2 . 2 2 . . 2 2 2 . 2 2 2 . 2 2 
. . 2 2 2 2 2 2 2 . 2 2 2 . 2 2 
. . . . . . . . 2 . 2 . . . . 2 
2 2 2 2 . 2 2 . . . 2 . . . . 2 
. . . . . 2 2 . 2 2 2 . . . . 2 
2 2 2 2 . 2 2 . 2 . . . . . . 2 
. . . . . 2 . . . . 2 . . . . 2 
2 2 2 2 . 2 2 . 2 2 2 . . . . 2 
. . . . . 2 2 2 2 2 2 . 2 2 . 2 
2 2 2 2 . . . . . . . . 2 2 . 2 
. . . 2 2 . 2 2 2 2 2 . 2 2 . 2 
. . . . 2 . 2 . . . 2 . 2 2 . . 
. . . . 2 . 2 . . . 2 . 2 2 . . 
`, [myTiles.transparency16,sprites.dungeon.darkGroundCenter,sprites.dungeon.collectibleBlueCrystal,sprites.dungeon.collectibleRedCrystal], TileScale.Sixteen);
        }
        return null;
    })

    helpers._registerFactory("tile", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "transparency16":return transparency16;
            case "myTile":
            case "tile1":return tile1;
        }
        return null;
    })

}
// Auto-generated code. Do not edit.
